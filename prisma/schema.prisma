generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String           @id
  username        String
  email           String           @unique
  sessions        Session[]
  keys            Key[]
  accounts        Account[]
  apiKeys         ApiKey[]
  fees            Fee[]
  assets          Asset[]
  assetTypes      AssetType[]
  modalities      Modality[]
  timeframes      Timeframe[]
  indicators      Indicator[]
  emotionCatalogs EmotionCatalog[]
  tradeErrors     TradeError[]
  strategies      Strategy[]
  trades          Trade[]
  emotionLogs     EmotionLog[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Key {
  id             String  @id
  hashedPassword String?
  userId         String
  user           User    @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id               String  @id @default(cuid())
  userId           String
  name             String
  initialBalance   Float
  currency         String  @default("BRL")
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades           Trade[]

  @@index([userId])
}

model ApiKey {
  id      String @id @default(cuid())
  userId  String
  service String
  key     String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Fee {
  id           String  @id @default(cuid())
  userId       String
  name         String
  value        Float
  isPercentage Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Asset {
  id          String      @id @default(cuid())
  userId      String
  ticker      String
  description String?
  assetTypeId String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assetType   AssetType   @relation(fields: [assetTypeId], references: [id])
  trades      Trade[]

  @@unique([userId, ticker])
}

model AssetType {
  id       String  @id @default(cuid())
  userId   String
  name     String
  currency String  @default("BRL")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets   Asset[]

  @@unique([userId, name])
}

model Modality {
  id     String  @id @default(cuid())
  userId String
  name   String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades Trade[]

  @@unique([userId, name])
}

model Timeframe {
  id     String  @id @default(cuid())
  userId String
  name   String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades Trade[]

  @@unique([userId, name])
}

model Indicator {
  id     String @id @default(cuid())
  userId String
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model EmotionCatalog {
  id          String       @id @default(cuid())
  userId      String
  name        String
  impact      String
  description String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emotionLogs EmotionLog[]

  @@unique([userId, name])
}

model TradeError {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      Trade[] @relation("TradeToError")

  @@unique([userId, name])
}

model Strategy {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      Trade[]

  @@unique([userId, name])
}

model Trade {
  id             String       @id @default(cuid())
  userId         String
  entryDate      DateTime
  exitDate       DateTime?
  type           String
  quantity       Float
  entryPrice     Float
  exitPrice      Float?
  stopLoss       Float?
  takeProfit     Float?
  netResult      Float?
  context        String?
  notes          String?
  planAdherence  Int?
  lessonsLearned String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  assetId        String
  asset          Asset        @relation(fields: [assetId], references: [id])
  modalityId     String
  modality       Modality     @relation(fields: [modalityId], references: [id])
  timeframeId    String
  timeframe      Timeframe    @relation(fields: [timeframeId], references: [id])
  strategyId     String?
  strategy       Strategy?    @relation(fields: [strategyId], references: [id])
  errors         TradeError[] @relation("TradeToError")
  images         TradeImage[]
  emotionLogs    EmotionLog[]
}

model TradeImage {
  id      String @id @default(cuid())
  url     String
  tradeId String
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
}

model EmotionLog {
  id               String         @id @default(cuid())
  userId           String
  date             DateTime
  intensity        Int
  triggers         String?
  tradeId          String?
  emotionCatalogId String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  trade            Trade?         @relation(fields: [tradeId], references: [id])
  emotionCatalog   EmotionCatalog @relation(fields: [emotionCatalogId], references: [id])
} 